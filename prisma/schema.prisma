// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String?
  avatarUrl    String?   @map("avatar_url")
  provider     String?
  providerId   String?   @map("provider_id")
  Blogs        Blog[]
  Posts        Post[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastSignedAt DateTime? @map("last_signed_at")
  deletedAt    DateTime? @map("deleted_at")

  @@unique([provider, providerId], map: "providerIndex")
  @@map("users")
}

model Blog {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int             @map("user_id")
  name           String
  url            String
  rss            String
  primary        Boolean         @default(false)
  Posts          Post[]
  KeywordTagMaps KeywordTagMap[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@unique([id, userId], map: "blogIdIndex")
  @@unique([userId, name], map: "userNameIndex")
  @@map("blogs")
}

model Post {
  id          Int       @id @default(autoincrement())
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      Int       @map("blog_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @map("user_id")
  title       String
  description String
  url         String
  PostTags    PostTag[]
  publishedAt DateTime
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@unique([id, blogId], map: "postBlogIdIndex")
  @@unique([id, userId], map: "postUserIdIndex")
  @@map("posts")
}

model PostTag {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int  @map("post_id")
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  Int  @map("tag_id")

  @@unique([postId, tagId], map: "postTagIndex")
  @@map("post_tags")
}

model KeywordTagMap {
  id      Int    @id @default(autoincrement())
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  Int    @map("blog_id")
  keyword String
  tags    String

  @@unique([blogId, keyword], map: "blogKeywordIndex")
  @@map("keyword_tag_maps")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  PostTags PostTag[]

  @@map("tags")
}
