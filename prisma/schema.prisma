// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String?   @db.VarChar(20)
  avatarUrl    String?   @map("avatar_url") @db.Text()
  provider     String?   @map("provider") @db.VarChar(10)
  providerId   String?   @map("provider_id") @db.VarChar(100)
  isAgreed     Boolean   @default(false) @map("is_agreed")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  lastSignedAt DateTime? @map("last_signed_at") @db.Timestamp(0)
  deletedAt    DateTime? @map("deleted_at") @db.Timestamp(0)

  blogs      Blog[]
  posts      Post[]
  followers  Follow[]     @relation("following")
  followings Follow[]     @relation("follower")
  postlikes  PostLike[]
  reporteds  UserReport[] @relation("reported")
  reporters  UserReport[] @relation("reporter")
  blockers   UserBlock[]  @relation("blocker")
  blockeds   UserBlock[]  @relation("blocked")

  @@unique([provider, providerId], name: "providerIndex")
  @@map("users")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId], name: "followerFollowingIndex")
  @@map("follows")
}

model Blog {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  name            String    @db.VarChar(30)
  url             String    @unique @db.VarChar(512)
  rss             String    @unique @db.VarChar(512)
  main            Boolean   @default(false)
  lastPublishedAt DateTime? @map("last_published_at") @db.Timestamp(0)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts          Post[]
  keywordTagMaps KeywordTagMap[]

  @@unique([userId, name], name: "userNameIndex")
  @@map("blogs")
}

model Post {
  id          Int      @id @default(autoincrement())
  blogId      Int      @map("blog_id")
  userId      Int      @map("user_id")
  title       String   @db.VarChar(100)
  content     String   @db.VarChar(100)
  url         String   @unique @db.VarChar(512)
  publishedAt DateTime @map("published_at") @db.Timestamp(0)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  blog      Blog       @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])
  postTags  PostTag[]
  postLikes PostLike[]

  @@index(publishedAt, name: "publishedAtIndex")
  @@map("posts")
}

model PostTag {
  id     Int    @id @default(autoincrement())
  postId Int    @map("post_id")
  tag    String @db.VarChar(20)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, tag], name: "postTagIndex")
  @@map("post_tags")
}

model KeywordTagMap {
  id      Int    @id @default(autoincrement())
  blogId  Int    @map("blog_id")
  keyword String @db.VarChar(20)
  tags    Json

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, keyword], name: "blogKeywordIndex")
  @@map("keyword_tag_maps")
}

model PostLike {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")
  postId Int @map("post_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId], name: "postLikeIndex")
  @@map("post_likes")
}

model UserReport {
  id         Int    @id @default(autoincrement())
  reporterId Int    @map("reporter_id")
  reportedId Int    @map("reported_id")
  reason     String @db.VarChar(100)

  reporter User @relation("reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reported User @relation("reported", fields: [reportedId], references: [id], onDelete: Cascade)

  @@unique([reporterId, reportedId], name: "userReportIndex")
  @@map("user_reports")
}

model UserBlock {
  id        Int @id @default(autoincrement())
  blockerId Int @map("blocker_id")
  blockedId Int @map("blocked_id")

  blocker User @relation("blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId], name: "userBlockIndex")
  @@map("user_blocks")
}
