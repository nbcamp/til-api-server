// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../src/prisma/generated"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String?
  avatarUrl    String?   @map("avatar_url")
  provider     String?
  providerId   String?   @map("provider_id")
  Blog         Blog[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastSignedAt DateTime? @map("last_signed_at")
  deletedAt    DateTime? @map("deleted_at")

  @@unique([provider, providerId], map: "providerIndex")
  @@map("users")
}

model Blog {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int              @map("user_id")
  name           String
  url            String
  rss            String
  primary        Boolean          @default(false)
  Post           Post[]
  KeywordTagPair KeywordTagPair[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  @@unique([userId, name], map: "userNameIndex")
  @@map("blogs")
}

model Post {
  id          Int      @id @default(autoincrement())
  blog        Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      Int      @map("blog_id")
  title       String
  description String
  url         String
  rss         String
  publishedAt DateTime
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String
  KeywordTagPair KeywordTagPair[]

  @@map("tags")
}

model KeywordTagPair {
  id      Int    @id @default(autoincrement())
  blog    Blog   @relation(fields: [blogId], references: [id])
  blogId  Int    @map("blog_id")
  keyword String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   Int    @map("tag_id")

  @@unique([keyword, tagId], map: "keywordTagIndex")
  @@map("keyword_tag_pairs")
}
